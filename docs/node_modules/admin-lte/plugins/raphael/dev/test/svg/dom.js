!function(e){let n,t="http://raphaeljs.com";QUnit.module("DOM",{beforeEach:function(){n=new Raphael(document.getElementById("qunit-fixture"),1e3,1e3)},afterEach:function(){n.remove()}});const r=function(e,n,t,r,o){e.equal(n.parentNode,t),e.equal(n.previousSibling,r),e.equal(n.nextSibling,o)},o=function(e,n,t,o,a,d){e.equal(n.parentNode,t),r(e,t,o,a,d)};QUnit.test("insertBefore: no element",(function(e){const t=n.rect();t.insertBefore(null),r(e,t.node,n.canvas,n.defs,null)})),QUnit.test("insertBefore: first element",(function(e){const t=n.rect(),o=n.rect();o.insertBefore(t),r(e,o.node,n.canvas,n.defs,t.node)})),QUnit.test("insertBefore: middle element",(function(e){const t=n.rect(),o=n.rect(),a=n.rect();a.insertBefore(o),r(e,a.node,n.canvas,t.node,o.node)})),QUnit.test("insertBefore: no element when wrapped in <a>",(function(e){const r=n.rect().attr("href",t),a=r.node.parentNode;r.insertBefore(null),o(e,r.node,a,n.canvas,n.defs,null)})),QUnit.test("insertBefore: first element when wrapped in <a>",(function(e){const r=n.rect(),a=n.rect().attr("href",t),d=a.node.parentNode;a.insertBefore(r),o(e,a.node,d,n.canvas,n.defs,r.node)})),QUnit.test("insertBefore: first element wrapped in <a> and wrapped in <a>",(function(e){const r=n.rect().attr("href",t),a=r.node.parentNode,d=n.rect().attr("href",t),c=d.node.parentNode;d.insertBefore(r),o(e,d.node,c,n.canvas,n.defs,a)})),QUnit.test("insertBefore: middle element when wrapped in <a>",(function(e){const r=n.rect(),a=n.rect(),d=n.rect().attr("href",t),c=d.node.parentNode;d.insertBefore(a),o(e,d.node,c,n.canvas,r.node,a.node)})),QUnit.test("insertBefore: middle element wrapped in <a> and wrapped in <a>",(function(e){const r=n.rect().attr("href",t).node.parentNode,a=n.rect().attr("href",t),d=a.node.parentNode,c=n.rect().attr("href",t),s=c.node.parentNode;c.insertBefore(a),o(e,c.node,s,n.canvas,r,d)})),QUnit.test("insertAfter: no element",(function(e){const t=n.rect();t.insertAfter(null),r(e,t.node,n.canvas,n.defs,null)})),QUnit.test("insertAfter: last element",(function(e){const t=n.rect(),o=n.rect();o.insertAfter(t),r(e,o.node,n.canvas,t.node,null)})),QUnit.test("insertAfter: middle element",(function(e){const t=n.rect(),o=n.rect(),a=n.rect();a.insertAfter(t),r(e,a.node,n.canvas,t.node,o.node)})),QUnit.test("insertAfter: no element when wrapped in <a>",(function(e){const r=n.rect().attr("href",t),a=r.node.parentNode;r.insertAfter(null),o(e,r.node,a,n.canvas,n.defs,null)})),QUnit.test("insertAfter: last element when wrapped in <a>",(function(e){const r=n.rect(),a=n.rect().attr("href",t),d=a.node.parentNode;a.insertAfter(r),o(e,a.node,d,n.canvas,r.node,null)})),QUnit.test("insertAfter: last element wrapped in <a> and wrapped in <a>",(function(e){const r=n.rect().attr("href",t),a=r.node.parentNode,d=n.rect().attr("href",t),c=d.node.parentNode;d.insertAfter(r),o(e,d.node,c,n.canvas,a,null)})),QUnit.test("insertAfter: middle element when wrapped in <a>",(function(e){const r=n.rect(),a=n.rect(),d=n.rect().attr("href",t),c=d.node.parentNode;d.insertAfter(r),o(e,d.node,c,n.canvas,r.node,a.node)})),QUnit.test("insertAfter: middle element wrapped in <a> and wrapped in <a>",(function(e){const r=n.rect().attr("href",t),a=r.node.parentNode,d=n.rect().attr("href",t).node.parentNode,c=n.rect().attr("href",t),s=c.node.parentNode;c.insertAfter(r),o(e,c.node,s,n.canvas,a,d)})),QUnit.test("remove: after added",(function(e){const t=n.rect(),r=t.node;t.remove(),e.equal(t.node,null),e.equal(r.parentNode,null)})),QUnit.test("remove: when wrapped in <a>",(function(e){const r=n.rect().attr("href",t),o=r.node,a=o.parentNode;r.remove(),e.equal(r.node,null),e.equal(o.parentNode,a),e.equal(a.parentNode,null)})),QUnit.test("remove: when already removed",(function(e){const t=n.rect(),r=t.node;t.remove(),t.remove(),e.equal(t.node,null),e.equal(r.parentNode,null)})),QUnit.test("remove: when the canvas is removed",(function(e){const t=n.rect(),r=t.node;n.remove(),t.remove(),e.equal(t.node,null),e.equal(r.parentNode,null)})),QUnit.test("toFront: normal",(function(e){const t=n.rect(),o=n.rect();t.toFront(),r(e,t.node,n.canvas,o.node,null)})),QUnit.test("toFront: when wrapped in <a>",(function(e){const r=n.rect().attr("href",t),a=r.node.parentNode,d=n.rect();r.toFront(),o(e,r.node,a,n.canvas,d.node,null)})),QUnit.test("toBack: normal",(function(e){const t=n.rect(),o=n.rect();o.toBack(),r(e,o.node,n.canvas,null,n.desc),r(e,t.node,n.canvas,n.defs,null)})),QUnit.test("toBack: when wrapped in <a>",(function(e){const a=n.rect(),d=n.rect().attr("href",t),c=d.node.parentNode;d.toBack(),o(e,d.node,c,n.canvas,null,n.desc),r(e,a.node,n.canvas,n.defs,null)}))}();